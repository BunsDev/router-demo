import { buyToken, Execute } from '@reservoir0x/client-sdk'
import * as Dialog from '@radix-ui/react-dialog'
import React, { FC, useState } from 'react'
import { useAccount, useSigner } from 'wagmi'
import { CgSpinner } from 'react-icons/cg'
import ModalCard from './ModalCard'
import Error from './Error'
import useIsWrongNetwork from 'hooks/useIsWrongNetwork'

// Load environment variables using the appropiate Next.js
// nomenclature
// https://nextjs.org/docs/basic-features/environment-variables#exposing-environment-variables-to-the-browser
const ERC1155_CONTRACT_ADDRESS =
  process.env.NEXT_PUBLIC_ERC1155_CONTRACT_ADDRESS
const API_BASE = process.env.NEXT_PUBLIC_API_BASE

const MultiBuy: FC = () => {
  // wagmi hooks
  const [{ data: signer }] = useSigner()
  const [{ data: accountData }] = useAccount()

  // Check if the user is connected to the wrong Ethereum Network
  const isWrongNetwork = useIsWrongNetwork()

  // Steps are shown in the modal to inform user about the
  // progress of execution for the current action.
  // The steps variable will be updated by the client SDK
  const [steps, setSteps] = useState<Execute['steps']>()

  // Loading state for the action button
  const [waitingTx, setWaitingTx] = useState<boolean>(false)

  // Error state for the action button
  const [error, setError] = useState<any>(undefined)

  // Control the open state for the modal
  const [open, setOpen] = useState(false)

  // Construct the token with the format `{contract-address}:{token-id}`
  const token = `${ERC1155_CONTRACT_ADDRESS}:1`

  // Close the modal and reset parameters
  const close = () => {
    // Close modal
    setOpen(false)
    // Reset steps
    setSteps(undefined)
    // Toggle off waiting state
    setWaitingTx(false)
  }

  // Execute the following function when the transaction has been
  // completed sucessfully
  const handleSuccess: Parameters<typeof buyToken>[0]['handleSuccess'] = () => {
    // Remove the error message, if any
    setError(undefined)
  }

  // Execute the following function when the transaction has been
  // failed
  const handleError: Parameters<typeof buyToken>[0]['handleError'] = (
    err: any
  ) => {
    // Close the steps modal
    close()

    // Differentiate error messages
    if (err?.message === 'Taker does not have sufficient balance') {
      // Set the error message in the UI
      setError(
        <Error>
          Insufficient funds.{' '}
          <a
            href="https://faucet.paradigm.xyz/"
            rel="noopener noreferrer nofollow"
            className="underline"
          >
            Top up your Rinkeby ETH
          </a>{' '}
          and try again.
        </Error>
      )
    } else {
      setError(<Error>{err?.message}</Error>)
    }
  }

  // Execute this function to buy multiple tokens
  const execute = async (taker: string) => {
    // Set the loading state on
    setWaitingTx(true)

    // Use the client SDK to buy a token
    await buyToken({
      query: {
        // The token format is `{contract-address}:{token-id}`
        token,
        // The signer's Ethereum address
        taker,
        // Amount of tokens to be purchased
        quantity: 2,
      },
      // Signer is an Ethereum signer object, usually generated by the browser
      signer,
      // The API base url for reservoir
      apiBase: API_BASE,
      setState: setSteps,
      handleSuccess,
      handleError,
    })

    // Set the loading state off
    setWaitingTx(false)
  }

  const taker = accountData?.address

  return (
    <article>
      {error}
      {/* Use Radix UI to create a modal to display the current state */}
      {/* of execution for the chosen transaction */}
      <Dialog.Root open={open} onOpenChange={setOpen}>
        <Dialog.Trigger
          disabled={isWrongNetwork || waitingTx || !signer || !taker}
          onClick={() => taker && execute(taker)}
          className="btn-primary-fill w-[222px] mx-auto"
        >
          {waitingTx ? (
            <CgSpinner className="h-4 w-4 animate-spin" />
          ) : (
            'Buy 2 Tokens'
          )}
        </Dialog.Trigger>
        <Dialog.Portal>
          <Dialog.Overlay>
            <ModalCard
              loading={waitingTx}
              title="Buy 2 Tokens"
              close={close}
              steps={steps}
            />
          </Dialog.Overlay>
        </Dialog.Portal>
      </Dialog.Root>
    </article>
  )
}

export default MultiBuy
